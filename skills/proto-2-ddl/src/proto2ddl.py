#!/usr/bin/env python3
"""
Proto to DDL Converter

This utility converts Google Protocol Buffer definitions to MySQL schema definitions.
It provides detailed logging and error handling for debugging purposes.
"""

import os
import sys
from pathlib import Path
from typing import Optional, Dict, Any
import click
from google.protobuf.descriptor_pb2 import FileDescriptorProto, FieldDescriptorProto
from google.protobuf import text_format
from loguru import logger

# Configure logging
logger.remove()  # Remove default handler
logger.add(sys.stderr, level="INFO")  # Console logging
logger.add("proto2ddl.log", rotation="10 MB", level="DEBUG")  # File logging

# Mapping of Protocol Buffer types to MySQL types
PROTO_TO_MYSQL_TYPE = {
    FieldDescriptorProto.TYPE_DOUBLE: "DOUBLE",
    FieldDescriptorProto.TYPE_FLOAT: "FLOAT",
    FieldDescriptorProto.TYPE_INT64: "BIGINT",
    FieldDescriptorProto.TYPE_UINT64: "BIGINT UNSIGNED",
    FieldDescriptorProto.TYPE_INT32: "INT",
    FieldDescriptorProto.TYPE_UINT32: "INT UNSIGNED",
    FieldDescriptorProto.TYPE_BOOL: "BOOLEAN",
    FieldDescriptorProto.TYPE_STRING: "VARCHAR(255)",
    FieldDescriptorProto.TYPE_BYTES: "BLOB",
    FieldDescriptorProto.TYPE_ENUM: "ENUM",
    # Add more type mappings as needed
}

def read_proto_file(proto_file: str) -> Optional[FileDescriptorProto]:
    """
    Read and parse the proto file.
    
    Args:
        proto_file: Path to the proto file
        
    Returns:
        Parsed FileDescriptorProto or None if parsing fails
    """
    try:
        logger.debug(f"Reading proto file: {proto_file}")
        with open(proto_file, 'r') as f:
            proto_content = f.read()
            
        descriptor = FileDescriptorProto()
        text_format.Parse(proto_content, descriptor)
        logger.info(f"Successfully parsed proto file: {proto_file}")
        return descriptor
    except FileNotFoundError:
        logger.error(f"Proto file not found: {proto_file}")
        return None
    except text_format.ParseError as e:
        logger.error(f"Failed to parse proto file: {e}")
        return None
    except Exception as e:
        logger.error(f"Unexpected error reading proto file: {e}")
        return None

def generate_table_definition(message: Any) -> str:
    """
    Generate MySQL table definition for a protobuf message.
    
    Args:
        message: Protobuf message descriptor
        
    Returns:
        MySQL table definition as string
    """
    logger.debug(f"Generating table definition for message: {message.name}")
    
    lines = [f"CREATE TABLE `{message.name}` ("]
    fields = []
    
    for field in message.field:
        mysql_type = PROTO_TO_MYSQL_TYPE.get(field.type, "TEXT")
        nullable = "" if field.label == FieldDescriptorProto.LABEL_REQUIRED else "NULL"
        
        field_def = f"  `{field.name}` {mysql_type} {nullable}"
        fields.append(field_def)
        
        logger.debug(f"Added field definition: {field_def}")
    
    lines.extend(fields)
    lines.append(") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;")
    
    return "\n".join(lines)

def generate_schema(descriptor: FileDescriptorProto) -> str:
    """
    Generate complete MySQL schema from proto descriptor.
    
    Args:
        descriptor: Parsed proto file descriptor
        
    Returns:
        Complete MySQL schema as string
    """
    logger.debug("Generating complete schema")
    
    lines = [
        "-- Generated by proto2ddl",
        "-- https://github.com/yourusername/proto2ddl",
        "",
        "SET NAMES utf8mb4;",
        "SET FOREIGN_KEY_CHECKS = 0;",
        ""
    ]
    
    for message in descriptor.message_type:
        lines.append(generate_table_definition(message))
        lines.append("")
    
    lines.extend([
        "SET FOREIGN_KEY_CHECKS = 1;",
        ""
    ])
    
    logger.info(f"Generated schema with {len(descriptor.message_type)} tables")
    return "\n".join(lines)

@click.command()
@click.option('--proto-file', required=True, help='Input proto file path')
@click.option('--schema-file', help='Output schema file path')
def main(proto_file: str, schema_file: Optional[str] = None):
    """Convert Protocol Buffer definition to MySQL schema."""
    logger.info(f"Starting proto2ddl conversion: {proto_file}")
    
    # Validate proto file
    if not proto_file:
        logger.error("Proto file path is required")
        sys.exit(1)
    
    # Generate default schema filename if not provided
    if not schema_file:
        proto_path = Path(proto_file)
        schema_file = str(proto_path.with_suffix('.sql'))
        logger.info(f"Using default schema file name: {schema_file}")
    
    # Read and parse proto file
    descriptor = read_proto_file(proto_file)
    if not descriptor:
        sys.exit(1)
    
    # Generate schema
    schema = generate_schema(descriptor)
    
    # Write schema to file
    try:
        with open(schema_file, 'w') as f:
            f.write(schema)
        logger.info(f"Successfully wrote schema to: {schema_file}")
    except Exception as e:
        logger.error(f"Failed to write schema file: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()
